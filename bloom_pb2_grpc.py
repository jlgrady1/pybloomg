# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import bloom_pb2 as bloom__pb2


class BloomStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateFilter = channel.unary_unary(
        '/pb.Bloom/CreateFilter',
        request_serializer=bloom__pb2.FilterRequest.SerializeToString,
        response_deserializer=bloom__pb2.Response.FromString,
        )
    self.ListFilters = channel.unary_unary(
        '/pb.Bloom/ListFilters',
        request_serializer=bloom__pb2.ListRequest.SerializeToString,
        response_deserializer=bloom__pb2.ListResponse.FromString,
        )
    self.Info = channel.unary_unary(
        '/pb.Bloom/Info',
        request_serializer=bloom__pb2.ListRequest.SerializeToString,
        response_deserializer=bloom__pb2.InfoResponse.FromString,
        )
    self.Add = channel.unary_unary(
        '/pb.Bloom/Add',
        request_serializer=bloom__pb2.KeyRequest.SerializeToString,
        response_deserializer=bloom__pb2.Response.FromString,
        )
    self.Has = channel.unary_unary(
        '/pb.Bloom/Has',
        request_serializer=bloom__pb2.KeyRequest.SerializeToString,
        response_deserializer=bloom__pb2.HasResponse.FromString,
        )
    self.Clear = channel.unary_unary(
        '/pb.Bloom/Clear',
        request_serializer=bloom__pb2.FilterRequest.SerializeToString,
        response_deserializer=bloom__pb2.Response.FromString,
        )
    self.Drop = channel.unary_unary(
        '/pb.Bloom/Drop',
        request_serializer=bloom__pb2.FilterRequest.SerializeToString,
        response_deserializer=bloom__pb2.Response.FromString,
        )


class BloomServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CreateFilter(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListFilters(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Info(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Add(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Has(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Clear(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Drop(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BloomServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateFilter': grpc.unary_unary_rpc_method_handler(
          servicer.CreateFilter,
          request_deserializer=bloom__pb2.FilterRequest.FromString,
          response_serializer=bloom__pb2.Response.SerializeToString,
      ),
      'ListFilters': grpc.unary_unary_rpc_method_handler(
          servicer.ListFilters,
          request_deserializer=bloom__pb2.ListRequest.FromString,
          response_serializer=bloom__pb2.ListResponse.SerializeToString,
      ),
      'Info': grpc.unary_unary_rpc_method_handler(
          servicer.Info,
          request_deserializer=bloom__pb2.ListRequest.FromString,
          response_serializer=bloom__pb2.InfoResponse.SerializeToString,
      ),
      'Add': grpc.unary_unary_rpc_method_handler(
          servicer.Add,
          request_deserializer=bloom__pb2.KeyRequest.FromString,
          response_serializer=bloom__pb2.Response.SerializeToString,
      ),
      'Has': grpc.unary_unary_rpc_method_handler(
          servicer.Has,
          request_deserializer=bloom__pb2.KeyRequest.FromString,
          response_serializer=bloom__pb2.HasResponse.SerializeToString,
      ),
      'Clear': grpc.unary_unary_rpc_method_handler(
          servicer.Clear,
          request_deserializer=bloom__pb2.FilterRequest.FromString,
          response_serializer=bloom__pb2.Response.SerializeToString,
      ),
      'Drop': grpc.unary_unary_rpc_method_handler(
          servicer.Drop,
          request_deserializer=bloom__pb2.FilterRequest.FromString,
          response_serializer=bloom__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pb.Bloom', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
